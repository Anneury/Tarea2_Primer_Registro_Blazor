@page "/Personas"
@page "/Personas/{PersonaId:int}"

@using Tarea2_Primer_Registro_Blazor.Models;
@using Tarea2_Primer_Registro_Blazor.BLL;
@using Blazored.Toast;
@using Blazored.Toast.Services;


@inject IToastService toast


<EditForm Model="Persona" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">

        <div class="card-header">
            <h1>Registro de Personas</h1>
        </div>

        <div class="card-body">
            <form>
                @*PersonaId*@
                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>PersonaId</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="Persona.PersonaId" class="form-control col-4" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-outline-info" @onclick="Buscar">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="13" height="14" fill="spacegray" class="bi bi-search" viewBox="0 0 16 16">
                                            <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
                                        </svg>Buscar
                                    </button>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @*Nombres*@
                <div class="form-group">
                    <label>Nombres</label>
                    <InputText @bind-Value="Persona.Nombre" class="form-control" />
                    <ValidationMessage For="@(() => Persona.Nombre)" />
                </div>

                @*Telefono*@
                <div class="form-group">
                    <label>Telefono</label>
                    <InputText @bind-Value="Persona.Telefono" class="form-control" />
                    <ValidationMessage For="@(() => Persona.Telefono)" />
                </div>

                @*Cedula*@
                <div class="form-group">
                    <label>Cedula</label>
                    <InputText @bind-Value="Persona.Cedula" class="form-control" />
                    <ValidationMessage For="@(() => Persona.Cedula)" />
                </div>

                @*Direccion*@
                <div class="form-group">
                    <label>Direccion</label>
                    <InputText @bind-Value="Persona.Direccion" class="form-control" />
                    <ValidationMessage For="@(() => Persona.Direccion)" />
                </div>

                @*Fecha de Nacimiento*@
                <div class="form-group">
                    <label>Fecha de Nacimiento</label>
                    <InputDate @bind-Value="Persona.FechaNacimiento" class="form-control" />
                    <ValidationMessage For="@(() => Persona.FechaNacimiento)" />
                </div>
            </form>
        </div>
        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">Nuevo</button>
                <button type="submit" class="btn btn-lg btn-success">Guardar</button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">Eliminar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int PersonaId { get; set; }
    public Personas Persona = new Personas();

    protected override void OnInitialized()
    {
        Nuevo(); //siempre se hace nuevo

        Buscar(); //solo hace efecto si se paso un id por parametro
    }

    public void Nuevo()
    {
        Persona = new Personas();
    }

    private void Buscar()
    {
        if (Persona.PersonaId > 0)
        {
            var encontrado = PersonasBLL.Buscar(Persona.PersonaId);

            if (encontrado != null)
                this.Persona = encontrado;
            else
                toast.ShowWarning("No encontrado");
        }
    }

    public void Guardar()
    {
        bool guardo;

        guardo = PersonasBLL.Guardar(Persona);

        if (guardo)
        {
            Nuevo();
            toast.ShowSuccess("Guardado correctamente");
        }
        else
            toast.ShowError("No fue posible guardar");
    }

    public void Eliminar()
    {
        bool elimino;

        elimino = PersonasBLL.Eliminar(Persona.PersonaId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }
}

